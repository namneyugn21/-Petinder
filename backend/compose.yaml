services:
  ### Frontend ###
  frontend:
    restart: always
    build:
      context: ../frontend
    ports:
      - 3000:3000
  ### Frontend ###

  ### API GATEWAY ###
  gate-service:
    restart: on-failure
    build:
      context: ./gateway
    ports:
      - 80:8080
  ### API GATEWAY ###
  
  ### AUTH SERVICE ###
  auth-service:
    restart: on-failure
    build:
      context: ./auth-service
    env_file:
      - path: ./auth-service/env/docker.env
    expose:
      - 8080
    depends_on:
      auth-db:
        condition: service_healthy

  auth-db:
    image: postgres:16.3
    restart: always
    env_file:
      - path: ./auth-service/env/docker.env
    volumes:
      - auth-data:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-cache:
    image: docker.io/redis:7.2.3
    restart: always
    expose:
      - 6379
    volumes:
      - auth-data-cache:/data
  ### AUTH SERVICE ###

  ### PET SERVICE ###
  pet-service:
    restart: on-failure
    build:
      context: ./pet-service
    env_file:
      - path: ./pet-service/env/docker.env
    expose:
      - 8080
    depends_on:
      pet-db:
        condition: service_healthy

  pet-db:
    image: postgres:16.3
    restart: always
    env_file:
      - path: ./pet-service/env/docker.env
    volumes:
      - pet-data:/var/lib/postgresql/data
    ports:
      - 5435:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  ### PET SERVICE ###

  ### USER SERVICE ###
  user-service:
    restart: on-failure
    build:
      context: ./user-service
    env_file:
      - path: ./user-service/env/docker.env
    expose:
      - 8080
    depends_on:
      user-db:
        condition: service_healthy

  user-db:
    image: postgres:16.3
    restart: always
    env_file:
      - path: ./user-service/env/docker.env
    volumes:
      - user-data:/var/lib/postgresql/data
    ports:
      - 5434:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  ### USER SERVICE ###
  
  ### Broker ###
  rabbitmq:
    image: 'rabbitmq:latest'
    env_file:
      - path: ./user-service/env/docker.env
    expose:
      - 5672
  ### Broker ###

volumes:
  auth-data:
  auth-data-cache:
  user-data:
  pet-data:
